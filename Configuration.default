#!/bin/csh -f

#
# Configuration.default
#
# Source this file from any csh script to set the
# env variables
#

if ( ${?MGICONFIG} == 0 ) then
	setenv MGICONFIG /usr/local/mgi/live/mgiconfig
endif

source ${MGICONFIG}/master.config.csh

# directory
setenv CACHEDIR			/data/loads/mgi/seqcacheload

# data directory
setenv CACHEDATADIR		${CACHEDIR}/output

# logs directory
setenv CACHELOGSDIR		${CACHEDIR}/logs

setenv COLDELIM       "&=&"
setenv LINEDELIM      "\n"

# debug for seqmarker.py
# when true: when selecting the representative genomic sequence
# prints case number, markerKey, four sets of genomic sequences and the
# representative sequence selected
setenv SEQMARKER_DEBUG  false

# biotype conflict equivalency mappings
setenv NCBI_EQUIV	"null:all feature types,unknown:all feature types,other:all feature types,miscRNA:unclassified gene|non-coding RNA gene or its children,protein-coding:protein coding gene|polymorphic pseudogene,pseudo:pseudogenic region|pseudogene|pseudogenic gene segment|polymorphic pseudogene,rRNA:rRNA gene,snoRNA:snoRNA gene,snRNA:snRNA gene,scRNA:scRNA gene,tRNA:tRNA gene"

setenv ENSEMBL_EQUIV	"IG_C_gene:gene segment,IG_D_gene:gene segment,IG_J_gene:gene segment,IG_V_gene:gene segment,miRNA:miRNA gene,misc_RNA:unclassified gene|non-coding RNA gene or its children,processed_transcript:unclassified gene|non-coding RNA gene or its children,protein_coding:protein coding gene,pseudogene:pseudogenic region|pseudogene|pseudogenic gene segment,polymorphic_pseudogene:polymorphic pseudogene,rRNA:rRNA gene,snoRNA:snoRNA gene,snRNA:snRNA gene,lincRNA:lincRNA gene,Mt_tRNA:tRNA gene,Mt_rRNA:rRNA gene,3prime_overlapping_ncrna:unclassified gene|non-coding RNA gene or its children,antisense:unclassified gene|non-coding RNA gene or its children,ncrna_host:unclassified gene|non-coding RNA gene or its children|lincRNA gene,non_coding:unclassified gene|non-coding RNA gene or its children,sense_intronic:unclassified gene|non-coding RNA gene or its children,sense_overlapping:unclassified gene|non-coding RNA gene or its children"
# The vega string is too long now, so split into two variables
setenv VEGA_EQUIV1	"_protein_coding:protein coding gene,_polymorphic:protein coding gene,_processed_transcript:unclassified gene|non-coding RNA gene or its children,_non_coding:unclassified gene|non-coding RNA gene or its children,_3prime_overlapping_ncrna:unclassified gene|non-coding RNA gene or its children,_ambiguous_orf:protein coding gene|unclassified gene,_antisense:unclassified gene|non-coding RNA gene or its children,_lincRNA:lincRNA gene,_ncRNA_host:unclassified gene|non-coding RNA gene or its children|lincRNA gene,_retained_intron:protein coding gene|unclassified gene,_sense_intronic:unclassified gene|non-coding RNA gene or its children, _sense_overlapping:unclassified gene|non-coding RNA gene or its children,_IG_gene:gene segment,_TR_gene:gene segment"

setenv VEGA_EQUIV2	"_TEC:all feature types,_pseudogene:pseudogene,_unprocessed_pseudogene:pseudogene,_processed_pseudogene:pseudogene,_transcribed_processed_pseudogene:pseudogene,_transcribed_unprocessed_pseudogene:pseudogene,_transcribed_unitary_pseudogene:pseudogene,_unitary_pseudogene:pseudogene,_polymorphic_pseudogene:polymorphic pseudogene,_IG_pseudogene:pseudogenic gene segment"

# equivalency term that indicates to map the associated raw term to 
# 'non-coding RNA gene' and all its children. This is applicable to all 
# providers. We do this in code rather than in config file because there is a 
# limit to the length of a configuration value
setenv NC_RNA_TERM	"non-coding RNA gene or its children"

# equivalency term that indicates to map the associated raw term to all
# children of 'all feature types'. This is applicable to NCBI only.
setenv ALL_FEATURES_TERM	"all feature types"
